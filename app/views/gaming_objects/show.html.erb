<div class="gaming_object_header">
  <span><%= image_tag @gaming_object.image_path %></span>
  <h1 style="display: inline-block"><%= @gaming_object.name %></h1>
</div>


<div class="row">
  <% @tips_hash.each do |category, category_tips| %>
    <div class="col-md-4">
      <h2><%= playing_sentence(category, @gaming_object) %></h2>
      <div class="row <%= category %>">
        <% category_tips.each do |tip| %>
          <%= render partial: "tips/show", locals: { tip: tip } %>
        <% end %>
      </div>
      <%= render partial: 'tips/form', locals: {category: category, gaming_object: @gaming_object} %>
    </div>
  <% end %>
</div>

<script>
  // on ready page:load Ã  cause de turbolinks
  $(document).ready(function() {
    
    function clearError(category) {
      var errors = $('.error');
      for (var i = 0; i < errors.length; i++) {
        errors[i].parentNode.removeChild(errors[i]);
      }
      
      var hasError = $('.has-error');
      for (var i = 0; i < hasError.length; i++) {
        hasError[i].className="form-group";
      }
    }
    
    function appendTip(data, category) {
      clearError(category);
      $('.'+category).append(data);
      var new_tip_panel = $(".tip_panel", $('.'+category)).last();
      bind_score_events(new_tip_panel);
      $('.form-'+category+'-description').val("");
    }
    
    
    function markError(errors, category) {
      clearError(category);
      for (var error in errors) {
        var parent = $('.form-'+category+'-'+error).parent();
        if (!parent.hasClass("has-error")) {
          parent.toggleClass('has-error');
        }
        for (var elem in errors[error]) {
          parent.append('<p class="error">'+errors[error][elem]+'</p>')
        }
      }
    }
    
    <% @tips_hash.keys.each do |category| %>
      $('#form-<%= category %>').on('ajax:success', function(e, data, status, xhr){
        appendTip(data, "<%= category %>");
      }).on('ajax:error',function(e, xhr, status, error){
        markError(xhr.responseJSON, '<%= category %>');
      });
    <% end %>
    
    function toggle_color(vote_button){
      if(vote_button.hasClass('upvote_tip')){
        vote_button.toggleClass('btn-default');
        vote_button.toggleClass('btn-success');
      } else if(vote_button.hasClass('downvote_tip')){
        vote_button.toggleClass('btn-default');
        vote_button.toggleClass('btn-danger');
      }
    }
    
    function update_score_value(score, bonus){
      score.text(parseInt(score.text()) + bonus);
    }

    function update_score(tip, bonus){
      var score = tip.find('.tip_score');
      var positive_score = tip.find('.tip_positive_score');
      var negative_score = tip.find('.tip_negative_score');
      var upvote_button = tip.find('.upvote_tip');
      var downvote_button = tip.find('.downvote_tip');
      
      if(tip.hasClass("is_not_voted")){
        update_score_value(score, bonus);
        if(bonus > 0){
          update_score_value(positive_score, bonus);
          toggle_color(upvote_button);
        } else {
          update_score_value(negative_score, -1 * bonus);
          toggle_color(downvote_button);
        }
        tip.removeClass("is_not_voted");
        tip.addClass("is_voted");
        
      } else if(tip.hasClass("is_voted")){
        if(upvote_button.hasClass("btn-success") && bonus < 0 || downvote_button.hasClass('btn-danger') && bonus > 0){
          update_score_value(score, 2 * bonus);
          update_score_value(positive_score, bonus);
          update_score_value(negative_score, -1 * bonus);
          toggle_color(upvote_button);
          toggle_color(downvote_button);
          
        }
      }
    }
    
    function bind_score_events(elements){
      elements.find('.upvote_tip').on('click', function() {
        var tip_panel = $(this).closest('.tip_panel');
        update_score(tip_panel, 1);
        event.preventDefault(); // Prevent link from following its href
      });
      
      elements.find('.downvote_tip').on('click', function() {
        var tip_panel = $(this).closest('.tip_panel');
        update_score(tip_panel, -1);
        event.preventDefault(); // Prevent link from following its href
      });
    }
    
    bind_score_events($('.tip_panel'));
    
  });
</script>